{"version":3,"file":"plugins/plugin.vendor-fullscreen.js","mappings":"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","sources":["webpack://@internetarchive/bookreader/./src/plugins/plugin.vendor-fullscreen.js","webpack://@internetarchive/bookreader/./node_modules/core-js/internals/string-trim-forced.js","webpack://@internetarchive/bookreader/./node_modules/core-js/modules/es.string.trim.js"],"sourcesContent":["/* global BookReader */\n\n/**\n * Toggles browser's native fullscreen mode if available device is not mobile\n */\nif (!isMobile()) {\n  const EVENT_NAMESPACE = '.bookreader_vendor-fullscreen';\n\n  jQuery.extend(BookReader.defaultOptions, {\n    /** @type {boolean} */\n    enableVendorFullscreenPlugin: true,\n  });\n\n  /** @override */\n  BookReader.prototype.setup = (function(super_) {\n    return function(options) {\n      super_.call(this, options);\n\n      this.isVendorFullscreenActive = false;\n    };\n  })(BookReader.prototype.setup);\n\n  /** @override */\n  BookReader.prototype.getInitialMode = (function(super_) {\n    return function(params) {\n      let nextMode = super_.call(this, params);\n      if (this.isVendorFullscreenActive) {\n        nextMode = this.constMode1up;\n      }\n      return nextMode;\n    };\n  })(BookReader.prototype.getInitialMode);\n\n  /** @override */\n  BookReader.prototype.init = (function(super_) {\n    return function() {\n      super_.call(this);\n\n      if (!fullscreenAllowed()) {\n        return;\n      }\n      // In fullscreen mode the colorbox and overlay need to be inside the fullscreen element to display properly.\n      bindFullscreenChangeListener(this, (e) => {\n        e.data.resize();\n        e.data.updateBrClasses();\n        const cboxOverlay = $('#cboxOverlay');\n        const cbox = $('#colorbox');\n        if (isFullscreenActive()) {\n          // In full screen mode, the colorbox and overlay need\n          // to be children of the fullscreen element to display properly.\n          const $fullscreen = $(getFullscreenElement());\n          $fullscreen.append(cboxOverlay).append(cbox);\n        } else {\n          // In non-fullscreen mode, the colorbox and overlay need\n          // to be children of the main document body.\n          $(document.body).append(cboxOverlay).append(cbox);\n        }\n      });\n    };\n  })(BookReader.prototype.init);\n\n  /**\n   * Start fullscreen mode\n   */\n  BookReader.prototype.enterFullWindow = function() {\n    this.refs.$brContainer.css('opacity', 0);\n\n    const windowWidth = $(window).width();\n    if (windowWidth <= this.onePageMinBreakpoint) {\n      this.switchMode(this.constMode1up);\n    }\n\n    this.isVendorFullscreenActive = true;\n    this.updateBrClasses();\n\n    this.resize();\n    this.jumpToIndex(this.currentIndex());\n\n    this.refs.$brContainer.animate({ opacity: 1 }, 400, 'linear');\n\n    $(document).on(`keyup.${EVENT_NAMESPACE}`, e => {\n      if (e.keyCode === 27) this.exitFullScreen();\n    });\n  };\n\n  /**\n   * Exit from fullscreen mode\n   */\n  BookReader.prototype.exitFullWindow = function() {\n    this.refs.$brContainer.css('opacity', 0);\n\n    $(document).off('keyup' + EVENT_NAMESPACE);\n\n    this.isFullscreenActive = false;\n    this.updateBrClasses();\n\n    this.resize();\n    this.refs.$brContainer.animate({ opacity: 1 }, 400, 'linear');\n  };\n\n  /**\n   * Returns true if fullscreen mode is enabled\n   *\n   * @returns {boolean}\n   */\n  BookReader.prototype.isFullscreen = function() {\n    return isFullscreenActive() || this.isVendorFullscreenActive;\n  };\n\n  /**\n   * Toggle screen\n   */\n  BookReader.prototype.toggleFullscreen = function() {\n    if (this.isFullscreen()) {\n      if (fullscreenAllowed()) {\n        exitFullscreen();\n      } else {\n        this.exitFullWindow();\n      }\n    } else {\n      if (fullscreenAllowed()) {\n        requestFullscreen(this.refs.$br[0]);\n      } else {\n        this.enterFullWindow();\n      }\n    }\n  };\n\n  /** @deprecated */\n  BookReader.util.isMobile = isMobile;\n\n  /** @deprecated */\n  BookReader.util.getFullscreenElement = getFullscreenElement;\n\n  /** @deprecated */\n  BookReader.util.bindFullscreenChangeListener = bindFullscreenChangeListener;\n\n  /** @deprecated */\n  BookReader.util.fullscreenAllowed = fullscreenAllowed;\n\n  /** @deprecated */\n  BookReader.util.requestFullscreen = requestFullscreen;\n\n  /** @deprecated */\n  BookReader.util.exitFullscreen = exitFullscreen;\n\n  /** @deprecated */\n  BookReader.util.isFullscreenActive = isFullscreenActive;\n}\n\n\n/**\n * Returns the DOM element being used for fullscreen.\n *\n * @returns {HTMLElement}\n * @see https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/fullscreenElement\n */\nexport function getFullscreenElement() {\n  return document.fullscreenElement ||\n    document.webkitFullscreenElement ||\n    document.mozFullScreenElement ||\n    document.msFullscreenElement;\n}\n\n/**\n * Returns true if the document is in fullscreen mode.\n *\n * @returns {boolean}\n */\nexport function isFullscreenActive() {\n  const fullscreenElement = getFullscreenElement();\n  return fullscreenElement !== null && fullscreenElement !== undefined;\n}\n\n/**\n * Exits fullscreen mode.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Document/exitFullscreen\n */\nexport function exitFullscreen() {\n  if (document.exitFullscreen) {\n    document.exitFullscreen();\n  } else if (document.webkitExitFullscreen) {\n    document.webkitExitFullscreen();\n  } else if (document.mozCancelFullScreen) {\n    document.mozCancelFullScreen();\n  } else if (document.msExitFullscreen) {\n    document.msExitFullscreen();\n  }\n}\n\n/**\n * Requests fullscreen mode for the given element\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullscreen\n */\nexport function requestFullscreen(element) {\n  if (element.requestFullscreen) {\n    element.requestFullscreen();\n  } else if (element.webkitRequestFullscreen) {\n    element.webkitRequestFullscreen();\n  } else if (element.mozRequestFullScreen) {\n    element.mozRequestFullScreen();\n  } else if (element.msRequestFullscreen) {\n    element.msRequestFullscreen();\n  }\n}\n\n/**\n * Returns true if fullscreen mode is allowed on this device and document.\n *\n * @returns {boolean}\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenEnabled\n */\nexport function fullscreenAllowed() {\n  return (document.fullscreenEnabled ||\n    document.webkitFullscreenEnabled ||\n    document.mozFullScreenEnabled ||\n    document.msFullScreenEnabled);\n}\n\n/**\n * jQuery-style binding to a fullscreenchange event.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenchange_event\n */\nexport function bindFullscreenChangeListener(\n  data, fullscreenchangeListener,\n) {\n  const event = 'fullscreenchange ';\n  const vendor_prefixes = [\n    'webkit',\n    'moz',\n    'ms',\n  ];\n  const all_events = (event + vendor_prefixes.join(event) + event).trim();\n  $(document).on(all_events, data, fullscreenchangeListener);\n}\n\n/**\n * Returns true if current device is mobile\n *\n * @returns {boolean}\n */\nexport function isMobile() {\n  return (typeof window.orientation !== 'undefined') || (navigator.userAgent.indexOf('IEMobile') !== -1);\n}\n","'use strict';\nvar PROPER_FUNCTION_NAME = require('../internals/function-name').PROPER;\nvar fails = require('../internals/fails');\nvar whitespaces = require('../internals/whitespaces');\n\nvar non = '\\u200B\\u0085\\u180E';\n\n// check that a method works with the correct list\n// of whitespaces and has a correct name\nmodule.exports = function (METHOD_NAME) {\n  return fails(function () {\n    return !!whitespaces[METHOD_NAME]()\n      || non[METHOD_NAME]() !== non\n      || (PROPER_FUNCTION_NAME && whitespaces[METHOD_NAME].name !== METHOD_NAME);\n  });\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar $trim = require('../internals/string-trim').trim;\nvar forcedStringTrimMethod = require('../internals/string-trim-forced');\n\n// `String.prototype.trim` method\n// https://tc39.es/ecma262/#sec-string.prototype.trim\n$({ target: 'String', proto: true, forced: forcedStringTrimMethod('trim') }, {\n  trim: function trim() {\n    return $trim(this);\n  }\n});\n"],"names":["super_","isMobile","EVENT_NAMESPACE","jQuery","extend","BookReader","defaultOptions","enableVendorFullscreenPlugin","prototype","setup","options","call","this","isVendorFullscreenActive","getInitialMode","params","nextMode","constMode1up","init","fullscreenAllowed","bindFullscreenChangeListener","e","data","resize","updateBrClasses","cboxOverlay","$","cbox","isFullscreenActive","getFullscreenElement","append","document","body","enterFullWindow","_this","refs","$brContainer","css","window","width","onePageMinBreakpoint","switchMode","jumpToIndex","currentIndex","animate","opacity","on","concat","keyCode","exitFullScreen","exitFullWindow","off","isFullscreen","toggleFullscreen","exitFullscreen","requestFullscreen","$br","util","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","webkitExitFullscreen","mozCancelFullScreen","msExitFullscreen","element","webkitRequestFullscreen","mozRequestFullScreen","msRequestFullscreen","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullScreenEnabled","fullscreenchangeListener","event","all_events","join","trim","orientation","navigator","userAgent","indexOf","PROPER_FUNCTION_NAME","fails","whitespaces","module","exports","METHOD_NAME","name","$trim","target","proto","forced","forcedStringTrimMethod"],"sourceRoot":""}