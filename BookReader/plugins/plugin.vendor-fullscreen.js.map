{"version":3,"sources":["webpack://@internetarchive/bookreader/./src/js/plugins/plugin.vendor-fullscreen.js","webpack://@internetarchive/bookreader/./node_modules/core-js/internals/string-trim-forced.js","webpack://@internetarchive/bookreader/./node_modules/core-js/internals/string-trim.js","webpack://@internetarchive/bookreader/./node_modules/core-js/internals/whitespaces.js","webpack://@internetarchive/bookreader/./node_modules/core-js/modules/es.string.trim.js"],"names":["super_","isMobile","EVENT_NAMESPACE","jQuery","extend","BookReader","defaultOptions","enableVendorFullscreenPlugin","prototype","setup","options","call","this","isVendorFullscreenActive","getInitialMode","params","nextMode","constMode1up","init","fullscreenAllowed","bindFullscreenChangeListener","e","data","resize","updateBrClasses","cboxOverlay","$","cbox","isFullscreenActive","getFullscreenElement","append","document","body","enterFullWindow","refs","$brContainer","css","window","width","onePageMinBreakpoint","switchMode","jumpToIndex","currentIndex","animate","opacity","on","keyCode","exitFullScreen","exitFullWindow","off","isFullscreen","toggleFullscreen","exitFullscreen","requestFullscreen","$br","util","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","webkitExitFullscreen","mozCancelFullScreen","msExitFullscreen","element","webkitRequestFullscreen","mozRequestFullScreen","msRequestFullscreen","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullScreenEnabled","fullscreenchangeListener","event","all_events","trim","join","bind","orientation","navigator","userAgent","indexOf","fails","whitespaces","module","exports","METHOD_NAME","name","requireObjectCoercible","whitespace","ltrim","RegExp","rtrim","createMethod","TYPE","$this","string","String","replace","start","end","$trim","target","proto","forced","forcedStringTrimMethod"],"mappings":"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","file":"plugins/plugin.vendor-fullscreen.js","sourcesContent":["/* global BookReader */\r\n\r\n/**\r\n * Toggles browser's native fullscreen mode if available device is not mobile\r\n */\r\nif (!isMobile()) {\r\n  const EVENT_NAMESPACE = '.bookreader_vendor-fullscreen';\r\n\r\n  jQuery.extend(BookReader.defaultOptions, {\r\n    /** @type {boolean} */\r\n    enableVendorFullscreenPlugin: true\r\n  });\r\n\r\n  /** @override */\r\n  BookReader.prototype.setup = (function(super_) {\r\n    return function(options) {\r\n      super_.call(this, options);\r\n\r\n      this.isVendorFullscreenActive = false;\r\n    };\r\n  })(BookReader.prototype.setup);\r\n\r\n  /** @override */\r\n  BookReader.prototype.getInitialMode = (function(super_) {\r\n    return function(params) {\r\n      let nextMode = super_.call(this, params);\r\n      if (this.isVendorFullscreenActive) {\r\n        nextMode = this.constMode1up;\r\n      }\r\n      return nextMode;\r\n    };\r\n  })(BookReader.prototype.getInitialMode);\r\n\r\n  /** @override */\r\n  BookReader.prototype.init = (function(super_) {\r\n    return function() {\r\n      super_.call(this);\r\n\r\n      if (!fullscreenAllowed()) {\r\n        return;\r\n      }\r\n      // In fullscreen mode the colorbox and overlay need to be inside the fullscreen element to display properly.\r\n      bindFullscreenChangeListener(this, (e) => {\r\n        e.data.resize();\r\n        e.data.updateBrClasses();\r\n        const cboxOverlay = $('#cboxOverlay');\r\n        const cbox = $('#colorbox');\r\n        if (isFullscreenActive()) {\r\n          // In full screen mode, the colorbox and overlay need\r\n          // to be children of the fullscreen element to display properly.\r\n          const $fullscreen = $(getFullscreenElement());\r\n          $fullscreen.append(cboxOverlay).append(cbox);\r\n        } else {\r\n          // In non-fullscreen mode, the colorbox and overlay need\r\n          // to be children of the main document body.\r\n          $(document.body).append(cboxOverlay).append(cbox);\r\n        }\r\n      });\r\n    }\r\n  })(BookReader.prototype.init);\r\n\r\n  /**\r\n   * Start fullscreen mode\r\n   */\r\n  BookReader.prototype.enterFullWindow = function() {\r\n    this.refs.$brContainer.css('opacity', 0);\r\n\r\n    const windowWidth = $(window).width();\r\n    if (windowWidth <= this.onePageMinBreakpoint) {\r\n      this.switchMode(this.constMode1up);\r\n    }\r\n\r\n    this.isVendorFullscreenActive = true;\r\n    this.updateBrClasses();\r\n\r\n    this.resize();\r\n    this.jumpToIndex(this.currentIndex());\r\n\r\n    this.refs.$brContainer.animate({ opacity: 1 }, 400, 'linear');\r\n\r\n    $(document).on(`keyup.${EVENT_NAMESPACE}`, e => {\r\n      if (e.keyCode === 27) this.exitFullScreen();\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Exit from fullscreen mode\r\n   */\r\n  BookReader.prototype.exitFullWindow = function() {\r\n    this.refs.$brContainer.css('opacity', 0);\r\n\r\n    $(document).off('keyup' + EVENT_NAMESPACE);\r\n\r\n    this.isFullscreenActive = false;\r\n    this.updateBrClasses()\r\n\r\n    this.resize();\r\n    this.refs.$brContainer.animate({ opacity: 1 }, 400, 'linear');\r\n  };\r\n\r\n  /**\r\n   * Returns true if fullscreen mode is enabled\r\n   *\r\n   * @returns {boolean}\r\n   */\r\n  BookReader.prototype.isFullscreen = function() {\r\n    return isFullscreenActive() || this.isVendorFullscreenActive;\r\n  };\r\n\r\n  /**\r\n   * Toggle screen\r\n   */\r\n  BookReader.prototype.toggleFullscreen = function() {\r\n    if (this.isFullscreen()) {\r\n      if (fullscreenAllowed()) {\r\n        exitFullscreen();\r\n      } else {\r\n        this.exitFullWindow();\r\n      }\r\n    } else {\r\n      if (fullscreenAllowed()) {\r\n        requestFullscreen(this.refs.$br[0]);\r\n      } else {\r\n        this.enterFullWindow();\r\n      }\r\n    }\r\n  };\r\n\r\n  /** @deprecated */\r\n  BookReader.util.isMobile = isMobile;\r\n\r\n  /** @deprecated */\r\n  BookReader.util.getFullscreenElement = getFullscreenElement;\r\n\r\n  /** @deprecated */\r\n  BookReader.util.bindFullscreenChangeListener = bindFullscreenChangeListener;\r\n\r\n  /** @deprecated */\r\n  BookReader.util.fullscreenAllowed = fullscreenAllowed;\r\n\r\n  /** @deprecated */\r\n  BookReader.util.requestFullscreen = requestFullscreen;\r\n\r\n  /** @deprecated */\r\n  BookReader.util.exitFullscreen = exitFullscreen;\r\n\r\n  /** @deprecated */\r\n  BookReader.util.isFullscreenActive = isFullscreenActive;\r\n}\r\n\r\n\r\n/**\r\n * Returns the DOM element being used for fullscreen.\r\n *\r\n * @returns {HTMLElement}\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/fullscreenElement\r\n */\r\nexport function getFullscreenElement() {\r\n  return document.fullscreenElement ||\r\n    document.webkitFullscreenElement ||\r\n    document.mozFullScreenElement ||\r\n    document.msFullscreenElement;\r\n}\r\n\r\n/**\r\n * Returns true if the document is in fullscreen mode.\r\n *\r\n * @returns {boolean}\r\n */\r\nexport function isFullscreenActive() {\r\n  const fullscreenElement = getFullscreenElement();\r\n  return fullscreenElement !== null && fullscreenElement !== undefined;\r\n}\r\n\r\n/**\r\n * Exits fullscreen mode.\r\n *\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Document/exitFullscreen\r\n */\r\nexport function exitFullscreen() {\r\n  if (document.exitFullscreen) {\r\n    document.exitFullscreen();\r\n  } else if (document.webkitExitFullscreen) {\r\n    document.webkitExitFullscreen();\r\n  } else if (document.mozCancelFullScreen) {\r\n    document.mozCancelFullScreen();\r\n  } else if (document.msExitFullscreen) {\r\n    document.msExitFullscreen();\r\n  }\r\n}\r\n\r\n/**\r\n * Requests fullscreen mode for the given element\r\n *\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullscreen\r\n */\r\nexport function requestFullscreen(element) {\r\n  if (element.requestFullscreen) {\r\n    element.requestFullscreen();\r\n  } else if (element.webkitRequestFullscreen) {\r\n    element.webkitRequestFullscreen();\r\n  } else if (element.mozRequestFullScreen) {\r\n    element.mozRequestFullScreen();\r\n  } else if (element.msRequestFullscreen) {\r\n    element.msRequestFullscreen();\r\n  }\r\n}\r\n\r\n/**\r\n * Returns true if fullscreen mode is allowed on this device and document.\r\n *\r\n * @returns {boolean}\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenEnabled\r\n */\r\nexport function fullscreenAllowed() {\r\n  return (document.fullscreenEnabled ||\r\n    document.webkitFullscreenEnabled ||\r\n    document.mozFullScreenEnabled ||\r\n    document.msFullScreenEnabled);\r\n}\r\n\r\n/**\r\n * jQuery-style binding to a fullscreenchange event.\r\n *\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenchange_event\r\n */\r\nexport function bindFullscreenChangeListener(\r\n  data, fullscreenchangeListener\r\n) {\r\n  const event = 'fullscreenchange ';\r\n  const vendor_prefixes = [\r\n    'webkit',\r\n    'moz',\r\n    'ms'\r\n  ];\r\n  const all_events = $.trim(event + vendor_prefixes.join(event) + event);\r\n  $(document).bind(all_events, data, fullscreenchangeListener);\r\n}\r\n\r\n/**\r\n * Returns true if current device is mobile\r\n *\r\n * @returns {boolean}\r\n */\r\nexport function isMobile() {\r\n  return (typeof window.orientation !== 'undefined') || (navigator.userAgent.indexOf('IEMobile') !== -1);\r\n}\r\n","var fails = require('../internals/fails');\nvar whitespaces = require('../internals/whitespaces');\n\nvar non = '\\u200B\\u0085\\u180E';\n\n// check that a method works with the correct list\n// of whitespaces and has a correct name\nmodule.exports = function (METHOD_NAME) {\n  return fails(function () {\n    return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;\n  });\n};\n","var requireObjectCoercible = require('../internals/require-object-coercible');\nvar whitespaces = require('../internals/whitespaces');\n\nvar whitespace = '[' + whitespaces + ']';\nvar ltrim = RegExp('^' + whitespace + whitespace + '*');\nvar rtrim = RegExp(whitespace + whitespace + '*$');\n\n// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation\nvar createMethod = function (TYPE) {\n  return function ($this) {\n    var string = String(requireObjectCoercible($this));\n    if (TYPE & 1) string = string.replace(ltrim, '');\n    if (TYPE & 2) string = string.replace(rtrim, '');\n    return string;\n  };\n};\n\nmodule.exports = {\n  // `String.prototype.{ trimLeft, trimStart }` methods\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart\n  start: createMethod(1),\n  // `String.prototype.{ trimRight, trimEnd }` methods\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trimend\n  end: createMethod(2),\n  // `String.prototype.trim` method\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trim\n  trim: createMethod(3)\n};\n","// a string of all valid unicode whitespaces\n// eslint-disable-next-line max-len\nmodule.exports = '\\u0009\\u000A\\u000B\\u000C\\u000D\\u0020\\u00A0\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n","'use strict';\nvar $ = require('../internals/export');\nvar $trim = require('../internals/string-trim').trim;\nvar forcedStringTrimMethod = require('../internals/string-trim-forced');\n\n// `String.prototype.trim` method\n// https://tc39.github.io/ecma262/#sec-string.prototype.trim\n$({ target: 'String', proto: true, forced: forcedStringTrimMethod('trim') }, {\n  trim: function trim() {\n    return $trim(this);\n  }\n});\n"],"sourceRoot":""}