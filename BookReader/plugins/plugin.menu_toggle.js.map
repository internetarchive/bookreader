{"version":3,"sources":["webpack://@internetarchive/bookreader/./src/js/plugins/menu_toggle/plugin.menu_toggle.js"],"names":["jQuery","extend","BookReader","defaultOptions","enableMenuToggle","holdOffOnToggle","hideArrow","br","refs","$BRnav","children","css","initialX","initialY","togglingNav","toggleRouter","e","atBookCenter","brContainer","element","book","document","querySelector","scrollWidth","offsetWidth","$brContainer","currentTarget","validBookClick","constMode1up","mode","event","clickPosition","clientX","bookWidth","leftOffset","offsetLeft","bookEndPageFlipArea","Math","round","leftThreshold","rightThreshold","isCenterClick","target","$","hasClass","on","navToggled","window","removeEventListener","navigationIsVisible","hideNavigation","showNavigation","toggleNav","stopPropagation","onBackgroundClick","onBookClick","registerClickHandlers","background","addEventListener","bind","capture","passive","firstChild","screenX","screenY","abs","registerDragHandlers","super_","installMenuToggle","hasNav","error","menuToggleEventRegister","setupDOMandHandlers","setupNavForToggle","join","$brPageViewEl","$brTwoPageView","removeClickHandlers","alwaysShowNav","prototype","setup","options","call","this","init"],"mappings":"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","file":"plugins/plugin.menu_toggle.js","sourcesContent":["\n/* global BookReader */\n/**\n * Plugin for managing menu visibility\n * Enabling this plug-in:\n * + removes the \"menu tab\" triangle\n * + toggles nav at: book center tap/click\n * + toggles nav at: black background tap/click\n *\n * Handles to events at CAPTURE phase\n *\n * This uses core BookReader functions and parameters to check its UI state:\n * - br.refs = (at best) ui references that are present at any given time\n * - br.navigationIsVisible() - checks using refs to confirm the navbar's presence\n * - br.showNavigation() & br.hideNavigation()\n * - br.constMode1up checks against br.mode;\n *\n * The list of BookReader custom events this plugin taps into are mainly\n * listed in the `.init` function\n */\n\n(function addMenuToggler() {\n  jQuery.extend(BookReader.defaultOptions, {\n    enableMenuToggle: true\n  });\n\n  /**\n     * `holdOffOnToggle` is used in fn `toggleRouter`\n     * to determine if menu toggle should happen\n     * set by `registerDragHandlers`\n     */\n  var holdOffOnToggle = false;\n\n  /**\n     * Hides Nav arrow tab\n     *\n     * @param { object } br - BookReader instance\n     */\n  function hideArrow(br) {\n    if (!br.refs || !br.refs.$BRnav) {\n      return;\n    }\n    var $menuTab = br.refs.$BRnav.children('.BRnavCntl');\n    $menuTab.css('display', 'none');\n  }\n\n  /**\n     * Sets up nav - hides arrow tab & adds click events\n     *\n     * @param { object } br - BookReader instance\n     */\n  function setupNavForToggle(br) {\n    hideArrow(br);\n    registerClickHandlers(br);\n  }\n\n  /**\n     * Resets nav to always show\n     * hides arrow tab, removes click events, shows nav chrome\n     *\n     * @param { object } br - BookReader instance\n     */\n  function alwaysShowNav(br) {\n    hideArrow(br);\n    removeClickHandlers(br);\n    br.showNavigation();\n  }\n\n  /**\n     * Removes click handlers on elements that house the book pages\n     *\n     * @param { object } br - BookReader instance\n     */\n  var removeClickHandlers = function removeClickHandlers(br) {\n    if (br.refs.$brPageViewEl) {\n      br.refs.$brPageViewEl[0].removeEventListener('click', onBookClick, true);\n    }\n    if (br.refs.$brTwoPageView) {\n      br.refs.$brTwoPageView[0].removeEventListener('click', onBookClick, true);\n    }\n  };\n\n  /**\n     * Toggle functionality\n     * Responsible for calling native functions `hideNavigation` & `showNavigation`\n     * Makes sure only 1 toggle action is taken at a time using `togglingNav` switch.\n     *\n     * @params { object } br - bookreader instance\n     */\n  var togglingNav = false; /* flag to make sure animations only fire once */\n  var toggleNav = function toggleNav(br) {\n    if (togglingNav) {\n      return;\n    }\n\n    togglingNav = true;\n    var navToggled = function navToggled() {\n      togglingNav = false;\n      window.removeEventListener('BookReader:navToggled', navToggled);\n    };\n    $(document).on('BookReader:navToggled', navToggled);\n\n    var menuIsShowing = br.navigationIsVisible();\n    if (menuIsShowing) {\n      br.hideNavigation();\n    } else {\n      br.showNavigation();\n    }\n  };\n\n  /**\n     * Check if div `BRcontainer` is scrollable.\n     * This normally happens when bookreader is zoomed in.\n     * not using br.refs, because `scrollWidth` & `offsetWidth` is not easily accessible.\n     */\n  var isBRcontainerScrollable = function isBRcontainerScrollable() {\n    var brContainer = document.querySelector('.BRcontainer');\n    var scrollWidth = brContainer.scrollWidth;\n    var offsetWidth = brContainer.offsetWidth;\n\n    return scrollWidth > offsetWidth;\n  };\n\n  /**\n     * Confirms whether or not the click happened in the nav toggle zone\n     *\n     * @param { MouseEvent } event - JS click event object\n     * @param { DOM } book - DOM element that represents book\n     */\n  var isCenterClick = function isCenterClick(event, book) {\n    var clickPosition = event.clientX;\n    var bookWidth = book.offsetWidth;\n    var leftOffset = book.offsetLeft;\n    var bookEndPageFlipArea = Math.round(bookWidth / 3);\n    var leftThreshold = Math.round(bookEndPageFlipArea + leftOffset); // without it, the click area is small\n    var rightThreshold = Math.round(bookWidth - bookEndPageFlipArea + leftOffset);\n    var isOkOnRight = clickPosition > leftThreshold;\n    var isOkOnLeft = clickPosition < rightThreshold;\n    var isCenterClick = isOkOnRight && isOkOnLeft;\n\n    return isCenterClick;\n  };\n\n  /**\n     * Confirms whether or not the click happened in the background\n     *\n     * @param { DOM } element\n     */\n  var isBackground = function isBackground(element) {\n    var isBackgroundClick = $(element).hasClass('BookReader')\n        || $(element).hasClass('BRcontainer') /* main black theatre */\n        || $(element).hasClass('BRemptypage') /* empty page placeholder */\n        || $(element).hasClass('BRpageview') /* empty page placeholder, 1up */\n        || $(element).hasClass('BRtwopageview'); /* empty page placeholder, 2up */\n    return isBackgroundClick;\n  };\n\n  /**\n     * Main hook into toggle functionality\n     * This is the only function that should be called by the event handlers\n     *\n     * @param { object } br - BookReader instance\n     * @param { MouseEvent } e - JS event object\n     * @param { boolean } atBookCenter - optional\n     */\n  var toggleRouter = function toggleRouter (br, e, atBookCenter) {\n    if (holdOffOnToggle) {\n      return;\n    }\n\n    var book = isBRcontainerScrollable() ? br.refs.$brContainer[0] : e.currentTarget;\n    var is1UpMode = br.constMode1up === br.mode;\n    var validBookClick = is1UpMode || isCenterClick(e, book);\n    var isValidClickArea = atBookCenter ? validBookClick : isBackground(e.target);\n    if (isValidClickArea) {\n      toggleNav(br, atBookCenter);\n\n      if (atBookCenter) {\n        e.stopPropagation(); // don't turn the page. this takes prescendence\n      }\n    }\n  };\n\n  /**\n     * background click event handler\n     * @param { object } br - BookReader instance\n     * @param { MouseEvent } e - JS event object\n     */\n  function onBackgroundClick(br, e) {\n    toggleRouter(br, e);\n  }\n\n  /**\n     * actual book container click event handler\n     *\n     * @param { object } br - BookReader instance\n     * @param { MouseEvent } e - JS event object\n     */\n  function onBookClick(br, e) {\n\n    var atBookCenter = true;\n    toggleRouter(br, e, atBookCenter);\n  }\n\n  var initialX;\n  var initialY;\n  /**\n     * attaches mouseup & mousedown event handlers to assess if user is dragging\n     * sets `initialX`, `initialY`, and `holdOffOnToggle`\n     */\n  function registerDragHandlers() {\n    var background = document.querySelector('.BookReader');\n    if (!background) {\n      return;\n    }\n\n    background.addEventListener('mousedown', function (e) {\n      initialX = e.screenX;\n      initialY = e.screenY;\n\n      holdOffOnToggle = true;\n    }, true);\n    background.addEventListener('mouseup', function (e) {\n      var isDrag = (Math.abs(initialX - e.screenX) > 5 || Math.abs(initialY - e.screenY) > 5);\n\n      if (!isDrag) {\n        holdOffOnToggle = false;\n        initialX = 0;\n        initialY = 0;\n      }\n    }, true);\n  }\n\n  /**\n     * attaches click handlers to background & book\n     * @param { object } br - BookReader instance\n     */\n  function registerClickHandlers(br) {\n    var background = document.querySelector('.BookReader');\n    if (!background) {\n      return;\n    }\n\n    background.addEventListener('click', onBackgroundClick.bind(null, br), { capture: true, passive: true });\n\n    var desk = document.querySelector('.BRcontainer') || {};\n    var book = desk.firstChild;\n\n    if (book) {\n      book.addEventListener('click', onBookClick.bind(null, br), true);\n      registerDragHandlers();\n    }\n  }\n\n  /**\n     * Install menu toggle\n     * attaches event handlers, sets up DOM on load\n     */\n  var installMenuToggle = function installMenuToggle(br) {\n    var hasNav = false;\n\n    try {\n      hasNav = br.navigationIsVisible();\n    } catch(error) {\n      hasNav = false;\n    }\n\n    if (!hasNav) {\n      return;\n    }\n\n    var menuToggleEventRegister = function menuToggleEventRegister(e) {\n      registerClickHandlers(br);\n    };\n\n    var setupDOMandHandlers = function setupDOMandHandlers(e) {\n      setupNavForToggle(br);\n    };\n\n    var persistNav = function persistNav(e) {\n      alwaysShowNav(br);\n    };\n\n    var whenToToggleNav = [\n      'BookReader:1PageViewSelected',\n      'BookReader:2PageViewSelected',\n      'BookReader:zoomIn',\n      'BookReader:zoomOut',\n      'BookReader:resize'\n    ];\n\n    var whenTolwaysShowNavWhen = [\n      'BookReader:3PageViewSelected'\n    ];\n\n    $(document).on(whenTolwaysShowNavWhen.join(' '), persistNav);\n    $(document).on(whenToToggleNav.join(' '), menuToggleEventRegister);\n    $(window).on('orientationchange', menuToggleEventRegister);\n    $(document).on('BookReader:fullscreenToggled', setupDOMandHandlers);\n    $(window).on('DOMContentLoaded', setupDOMandHandlers);\n    setupDOMandHandlers();\n  };\n\n  /**\n     * Add to BookReader\n     */\n  BookReader.prototype.setup = (function(super_) {\n    return function(options) {\n      super_.call(this, options);\n    };\n  })(BookReader.prototype.setup);\n\n  /**\n     * Initialize plugin\n     */\n  BookReader.prototype.init = (function(super_) {\n    return function() {\n      super_.call(this);\n      if (this.options.enableMenuToggle) {\n        installMenuToggle(this);\n      }\n    };\n  })(BookReader.prototype.init);\n})();\n"],"sourceRoot":""}