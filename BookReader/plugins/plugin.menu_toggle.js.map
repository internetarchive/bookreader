{"version":3,"sources":["webpack://@internetarchive/bookreader/./src/js/plugins/menu_toggle/plugin.menu_toggle.js"],"names":["jQuery","extend","BookReader","defaultOptions","enableMenuToggle","holdOffOnToggle","hideArrow","br","refs","$BRnav","children","css","initialX","initialY","togglingNav","toggleRouter","e","atBookCenter","brContainer","element","book","document","querySelector","scrollWidth","offsetWidth","$brContainer","currentTarget","validBookClick","constMode1up","mode","event","clickPosition","clientX","bookWidth","leftOffset","offsetLeft","bookEndPageFlipArea","Math","round","leftThreshold","rightThreshold","isCenterClick","target","$","hasClass","on","navToggled","window","removeEventListener","navigationIsVisible","hideNavigation","showNavigation","toggleNav","stopPropagation","onBackgroundClick","onBookClick","registerClickHandlers","background","addEventListener","bind","capture","passive","firstChild","screenX","screenY","abs","registerDragHandlers","super_","installMenuToggle","hasNav","error","menuToggleEventRegister","setupDOMandHandlers","setupNavForToggle","join","$brPageViewEl","$brTwoPageView","removeClickHandlers","alwaysShowNav","prototype","setup","options","call","this","init"],"mappings":"uJAqBA,WACEA,OAAOC,OAAOC,WAAWC,eAAgB,CACvCC,kBAAkB,IAQpB,IAAIC,GAAkB,EAOtB,SAASC,EAAUC,GACZA,EAAGC,MAASD,EAAGC,KAAKC,QAGVF,EAAGC,KAAKC,OAAOC,SAAS,cAC9BC,IAAI,UAAW,QA8B1B,IAmIIC,EACAC,EApHAC,GAAc,EA4EdC,EAAe,SAAuBR,EAAIS,EAAGC,GAC/C,IAAIZ,EAAJ,CAIA,IAtDIa,EAgCmCC,EAsBnCC,GAtDAF,EAAcG,SAASC,cAAc,iBACXC,YACZL,EAAYM,YAoDSjB,EAAGC,KAAKiB,aAAa,GAAKT,EAAEU,cAE/DC,EADYpB,EAAGqB,eAAiBrB,EAAGsB,MA1CrB,SAAuBC,EAAOV,GAChD,IAAIW,EAAgBD,EAAME,QACtBC,EAAYb,EAAKI,YACjBU,EAAad,EAAKe,WAClBC,EAAsBC,KAAKC,MAAML,EAAY,GAC7CM,EAAgBF,KAAKC,MAAMF,EAAsBF,GACjDM,EAAiBH,KAAKC,MAAML,EAAYG,EAAsBF,GAKlE,OAJkBH,EAAgBQ,GACjBR,EAAgBS,EAmCCC,CAAczB,EAAGI,IAC5BH,EAAeU,GAzBCR,EAyB6BH,EAAE0B,OAxB9CC,EAAExB,GAASyB,SAAS,eACrCD,EAAExB,GAASyB,SAAS,gBACpBD,EAAExB,GAASyB,SAAS,gBACpBD,EAAExB,GAASyB,SAAS,eACpBD,EAAExB,GAASyB,SAAS,qBA/Db,SAAmBrC,GAC7BO,IAIJA,GAAc,EAKd6B,EAAEtB,UAAUwB,GAAG,yBAJE,SAASC,IACxBhC,GAAc,EACdiC,OAAOC,oBAAoB,wBAAyBF,MAIlCvC,EAAG0C,sBAErB1C,EAAG2C,iBAEH3C,EAAG4C,kBAqEHC,CAAU7C,GAENU,GACFD,EAAEqC,qBAUR,SAASC,EAAkB/C,EAAIS,GAC7BD,EAAaR,EAAIS,GASnB,SAASuC,EAAYhD,EAAIS,GAGvBD,EAAaR,EAAIS,GADE,GAqCrB,SAASwC,EAAsBjD,GAC7B,IAAIkD,EAAapC,SAASC,cAAc,eACxC,GAAKmC,EAAL,CAIAA,EAAWC,iBAAiB,QAASJ,EAAkBK,KAAK,KAAMpD,GAAK,CAAEqD,SAAS,EAAMC,SAAS,IAEjG,IACIzC,GADOC,SAASC,cAAc,iBAAmB,IACrCwC,WAEZ1C,IACFA,EAAKsC,iBAAiB,QAASH,EAAYI,KAAK,KAAMpD,IAAK,GAvC/D,WACE,IAAIkD,EAAapC,SAASC,cAAc,eACnCmC,IAILA,EAAWC,iBAAiB,aAAa,SAAU1C,GACjDJ,EAAWI,EAAE+C,QACblD,EAAWG,EAAEgD,QAEb3D,GAAkB,KACjB,GACHoD,EAAWC,iBAAiB,WAAW,SAAU1C,GACjCqB,KAAK4B,IAAIrD,EAAWI,EAAE+C,SAAW,GAAK1B,KAAK4B,IAAIpD,EAAWG,EAAEgD,SAAW,IAGnF3D,GAAkB,EAClBO,EAAW,EACXC,EAAW,MAEZ,IAoBDqD,KAQJ,IAgDuCC,EAhDnCC,EAAoB,SAA2B7D,GACjD,IAAI8D,GAAS,EAEb,IACEA,EAAS9D,EAAG0C,sBACZ,MAAMqB,GACND,GAAS,EAGX,GAAKA,EAAL,CAIA,IAAIE,EAA0B,SAAiCvD,GAC7DwC,EAAsBjD,IAGpBiE,EAAsB,SAA6BxD,IAhOzD,SAA2BT,GACzBD,EAAUC,GACViD,EAAsBjD,GA+NpBkE,CAAkBlE,IAmBpBoC,EAAEtB,UAAUwB,GAJiB,CAC3B,gCAGoC6B,KAAK,MAhB1B,SAAoB1D,IAzNvC,SAAuBT,GACrBD,EAAUC,GAUc,SAA6BA,GACjDA,EAAGC,KAAKmE,eACVpE,EAAGC,KAAKmE,cAAc,GAAG3B,oBAAoB,QAASO,GAAa,GAEjEhD,EAAGC,KAAKoE,gBACVrE,EAAGC,KAAKoE,eAAe,GAAG5B,oBAAoB,QAASO,GAAa,GAdtEsB,CAAoBtE,GACpBA,EAAG4C,iBAuND2B,CAAcvE,MAgBhBoC,EAAEtB,UAAUwB,GAbU,CACpB,+BACA,+BACA,oBACA,qBACA,qBAQ6B6B,KAAK,KAAMH,GAC1C5B,EAAEI,QAAQF,GAAG,oBAAqB0B,GAClC5B,EAAEtB,UAAUwB,GAAG,+BAAgC2B,GAC/C7B,EAAEI,QAAQF,GAAG,mBAAoB2B,GACjCA,MAMFtE,WAAW6E,UAAUC,OAAkBb,EAIpCjE,WAAW6E,UAAUC,MAHf,SAASC,GACdd,EAAOe,KAAKC,KAAMF,KAOtB/E,WAAW6E,UAAUK,KAAQ,SAASjB,GACpC,OAAO,WACLA,EAAOe,KAAKC,MACRA,KAAKF,QAAQ7E,kBACfgE,EAAkBe,OAJK,CAO1BjF,WAAW6E,UAAUK,MA7S1B,K","file":"plugins/plugin.menu_toggle.js","sourcesContent":["\r\n/* global BookReader */\r\n/**\r\n * Plugin for managing menu visibility\r\n * Enabling this plug-in:\r\n * + removes the \"menu tab\" triangle\r\n * + toggles nav at: book center tap/click\r\n * + toggles nav at: black background tap/click\r\n *\r\n * Handles to events at CAPTURE phase\r\n *\r\n * This uses core BookReader functions and parameters to check its UI state:\r\n * - br.refs = (at best) ui references that are present at any given time\r\n * - br.navigationIsVisible() - checks using refs to confirm the navbar's presence\r\n * - br.showNavigation() & br.hideNavigation()\r\n * - br.constMode1up checks against br.mode;\r\n *\r\n * The list of BookReader custom events this plugin taps into are mainly\r\n * listed in the `.init` function\r\n */\r\n\r\n(function addMenuToggler() {\r\n  jQuery.extend(BookReader.defaultOptions, {\r\n    enableMenuToggle: true\r\n  });\r\n\r\n  /**\r\n     * `holdOffOnToggle` is used in fn `toggleRouter`\r\n     * to determine if menu toggle should happen\r\n     * set by `registerDragHandlers`\r\n     */\r\n  var holdOffOnToggle = false;\r\n\r\n  /**\r\n     * Hides Nav arrow tab\r\n     *\r\n     * @param { object } br - BookReader instance\r\n     */\r\n  function hideArrow(br) {\r\n    if (!br.refs || !br.refs.$BRnav) {\r\n      return;\r\n    }\r\n    var $menuTab = br.refs.$BRnav.children('.BRnavCntl');\r\n    $menuTab.css('display', 'none');\r\n  }\r\n\r\n  /**\r\n     * Sets up nav - hides arrow tab & adds click events\r\n     *\r\n     * @param { object } br - BookReader instance\r\n     */\r\n  function setupNavForToggle(br) {\r\n    hideArrow(br);\r\n    registerClickHandlers(br);\r\n  }\r\n\r\n  /**\r\n     * Resets nav to always show\r\n     * hides arrow tab, removes click events, shows nav chrome\r\n     *\r\n     * @param { object } br - BookReader instance\r\n     */\r\n  function alwaysShowNav(br) {\r\n    hideArrow(br);\r\n    removeClickHandlers(br);\r\n    br.showNavigation();\r\n  }\r\n\r\n  /**\r\n     * Removes click handlers on elements that house the book pages\r\n     *\r\n     * @param { object } br - BookReader instance\r\n     */\r\n  var removeClickHandlers = function removeClickHandlers(br) {\r\n    if (br.refs.$brPageViewEl) {\r\n      br.refs.$brPageViewEl[0].removeEventListener('click', onBookClick, true);\r\n    }\r\n    if (br.refs.$brTwoPageView) {\r\n      br.refs.$brTwoPageView[0].removeEventListener('click', onBookClick, true);\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Toggle functionality\r\n     * Responsible for calling native functions `hideNavigation` & `showNavigation`\r\n     * Makes sure only 1 toggle action is taken at a time using `togglingNav` switch.\r\n     *\r\n     * @params { object } br - bookreader instance\r\n     */\r\n  var togglingNav = false; /* flag to make sure animations only fire once */\r\n  var toggleNav = function toggleNav(br) {\r\n    if (togglingNav) {\r\n      return;\r\n    }\r\n\r\n    togglingNav = true;\r\n    var navToggled = function navToggled() {\r\n      togglingNav = false;\r\n      window.removeEventListener('BookReader:navToggled', navToggled);\r\n    };\r\n    $(document).on('BookReader:navToggled', navToggled);\r\n\r\n    var menuIsShowing = br.navigationIsVisible();\r\n    if (menuIsShowing) {\r\n      br.hideNavigation();\r\n    } else {\r\n      br.showNavigation();\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Check if div `BRcontainer` is scrollable.\r\n     * This normally happens when bookreader is zoomed in.\r\n     * not using br.refs, because `scrollWidth` & `offsetWidth` is not easily accessible.\r\n     */\r\n  var isBRcontainerScrollable = function isBRcontainerScrollable() {\r\n    var brContainer = document.querySelector('.BRcontainer');\r\n    var scrollWidth = brContainer.scrollWidth;\r\n    var offsetWidth = brContainer.offsetWidth;\r\n\r\n    return scrollWidth > offsetWidth;\r\n  }\r\n\r\n  /**\r\n     * Confirms whether or not the click happened in the nav toggle zone\r\n     *\r\n     * @param { MouseEvent } event - JS click event object\r\n     * @param { DOM } book - DOM element that represents book\r\n     */\r\n  var isCenterClick = function isCenterClick(event, book) {\r\n    var clickPosition = event.clientX;\r\n    var bookWidth = book.offsetWidth;\r\n    var leftOffset = book.offsetLeft\r\n    var bookEndPageFlipArea = Math.round(bookWidth / 3);\r\n    var leftThreshold = Math.round(bookEndPageFlipArea + leftOffset); // without it, the click area is small\r\n    var rightThreshold = Math.round(bookWidth - bookEndPageFlipArea + leftOffset);\r\n    var isOkOnRight = clickPosition > leftThreshold;\r\n    var isOkOnLeft = clickPosition < rightThreshold;\r\n    var isCenterClick = isOkOnRight && isOkOnLeft;\r\n\r\n    return isCenterClick;\r\n  }\r\n\r\n  /**\r\n     * Confirms whether or not the click happened in the background\r\n     *\r\n     * @param { DOM } element\r\n     */\r\n  var isBackground = function isBackground(element) {\r\n    var isBackgroundClick = $(element).hasClass('BookReader')\r\n        || $(element).hasClass('BRcontainer') /* main black theatre */\r\n        || $(element).hasClass('BRemptypage') /* empty page placeholder */\r\n        || $(element).hasClass('BRpageview') /* empty page placeholder, 1up */\r\n        || $(element).hasClass('BRtwopageview'); /* empty page placeholder, 2up */\r\n    return isBackgroundClick;\r\n  };\r\n\r\n  /**\r\n     * Main hook into toggle functionality\r\n     * This is the only function that should be called by the event handlers\r\n     *\r\n     * @param { object } br - BookReader instance\r\n     * @param { MouseEvent } e - JS event object\r\n     * @param { boolean } atBookCenter - optional\r\n     */\r\n  var toggleRouter = function toggleRouter (br, e, atBookCenter) {\r\n    if (holdOffOnToggle) {\r\n      return;\r\n    }\r\n\r\n    var book = isBRcontainerScrollable() ? br.refs.$brContainer[0] : e.currentTarget;\r\n    var is1UpMode = br.constMode1up === br.mode;\r\n    var validBookClick = is1UpMode || isCenterClick(e, book);\r\n    var isValidClickArea = atBookCenter ? validBookClick : isBackground(e.target);\r\n    if (isValidClickArea) {\r\n      toggleNav(br, atBookCenter);\r\n\r\n      if (atBookCenter) {\r\n        e.stopPropagation(); // don't turn the page. this takes prescendence\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n     * background click event handler\r\n     * @param { object } br - BookReader instance\r\n     * @param { MouseEvent } e - JS event object\r\n     */\r\n  function onBackgroundClick(br, e) {\r\n    toggleRouter(br, e);\r\n  }\r\n\r\n  /**\r\n     * actual book container click event handler\r\n     *\r\n     * @param { object } br - BookReader instance\r\n     * @param { MouseEvent } e - JS event object\r\n     */\r\n  function onBookClick(br, e) {\r\n\r\n    var atBookCenter = true;\r\n    toggleRouter(br, e, atBookCenter);\r\n  }\r\n\r\n  var initialX;\r\n  var initialY;\r\n  /**\r\n     * attaches mouseup & mousedown event handlers to assess if user is dragging\r\n     * sets `initialX`, `initialY`, and `holdOffOnToggle`\r\n     */\r\n  function registerDragHandlers() {\r\n    var background = document.querySelector('.BookReader');\r\n    if (!background) {\r\n      return;\r\n    }\r\n\r\n    background.addEventListener('mousedown', function (e) {\r\n      initialX = e.screenX;\r\n      initialY = e.screenY;\r\n\r\n      holdOffOnToggle = true;\r\n    }, true);\r\n    background.addEventListener('mouseup', function (e) {\r\n      var isDrag = (Math.abs(initialX - e.screenX) > 5 || Math.abs(initialY - e.screenY) > 5);\r\n\r\n      if (!isDrag) {\r\n        holdOffOnToggle = false;\r\n        initialX = 0;\r\n        initialY = 0;\r\n      }\r\n    }, true);\r\n  }\r\n\r\n  /**\r\n     * attaches click handlers to background & book\r\n     * @param { object } br - BookReader instance\r\n     */\r\n  function registerClickHandlers(br) {\r\n    var background = document.querySelector('.BookReader');\r\n    if (!background) {\r\n      return;\r\n    }\r\n\r\n    background.addEventListener('click', onBackgroundClick.bind(null, br), { capture: true, passive: true });\r\n\r\n    var desk = document.querySelector('.BRcontainer') || {};\r\n    var book = desk.firstChild;\r\n\r\n    if (book) {\r\n      book.addEventListener('click', onBookClick.bind(null, br), true);\r\n      registerDragHandlers();\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Install menu toggle\r\n     * attaches event handlers, sets up DOM on load\r\n     */\r\n  var installMenuToggle = function installMenuToggle(br) {\r\n    var hasNav = false;\r\n\r\n    try {\r\n      hasNav = br.navigationIsVisible();\r\n    } catch(error) {\r\n      hasNav = false;\r\n    }\r\n\r\n    if (!hasNav) {\r\n      return;\r\n    }\r\n\r\n    var menuToggleEventRegister = function menuToggleEventRegister(e) {\r\n      registerClickHandlers(br);\r\n    };\r\n\r\n    var setupDOMandHandlers = function setupDOMandHandlers(e) {\r\n      setupNavForToggle(br);\r\n    };\r\n\r\n    var persistNav = function persistNav(e) {\r\n      alwaysShowNav(br);\r\n    };\r\n\r\n    var whenToToggleNav = [\r\n      'BookReader:1PageViewSelected',\r\n      'BookReader:2PageViewSelected',\r\n      'BookReader:zoomIn',\r\n      'BookReader:zoomOut',\r\n      'BookReader:resize'\r\n    ];\r\n\r\n    var whenTolwaysShowNavWhen = [\r\n      'BookReader:3PageViewSelected'\r\n    ];\r\n\r\n    $(document).on(whenTolwaysShowNavWhen.join(' '), persistNav);\r\n    $(document).on(whenToToggleNav.join(' '), menuToggleEventRegister);\r\n    $(window).on('orientationchange', menuToggleEventRegister);\r\n    $(document).on('BookReader:fullscreenToggled', setupDOMandHandlers);\r\n    $(window).on('DOMContentLoaded', setupDOMandHandlers);\r\n    setupDOMandHandlers();\r\n  };\r\n\r\n  /**\r\n     * Add to BookReader\r\n     */\r\n  BookReader.prototype.setup = (function(super_) {\r\n    return function(options) {\r\n      super_.call(this, options);\r\n    };\r\n  })(BookReader.prototype.setup);\r\n\r\n  /**\r\n     * Initialize plugin\r\n     */\r\n  BookReader.prototype.init = (function(super_) {\r\n    return function() {\r\n      super_.call(this);\r\n      if (this.options.enableMenuToggle) {\r\n        installMenuToggle(this);\r\n      }\r\n    };\r\n  })(BookReader.prototype.init);\r\n})();\r\n"],"sourceRoot":""}