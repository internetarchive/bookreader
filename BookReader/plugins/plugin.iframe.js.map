{"version":3,"sources":["webpack://@internetarchive/bookreader/./src/js/plugins/plugin.iframe.js"],"names":["super_","MESSAGE_TYPE_FRAGMENT_CHANGE","BookReader","prototype","init","call","this","br","parent","window","bind","eventNames","fragmentChange","fragment","fragmentFromParams","paramsFromCurrent","postMessage","type","addEventListener","event","data","updateFromParams","paramsFromFragment","_attachEventListeners"],"mappings":"+IAMA,IAEuCA,EAFjCC,EAA+B,2BAErCC,WAAWC,UAAUC,MAAkBJ,EAKpCE,WAAWC,UAAUC,KAJf,WACLJ,EAAOK,KAAKC,MAcT,SAA+BC,GAA4B,IAAxBC,EAAwB,uDAAfC,OAAOD,OAEnDA,IAILD,EAAGG,KAAKR,WAAWS,WAAWC,gBAAgB,WAC5C,IAAMC,EAAWN,EAAGO,mBAAmBP,EAAGQ,qBAE1CP,EAAOQ,YACL,CAAEC,KAAMhB,EAA8BY,YACtC,QAIJJ,OAAOS,iBAAiB,WAAW,SAAAC,GAE5BA,EAAMC,MAAQD,EAAMC,KAAKH,OAAShB,GAIvCM,EAAGc,iBAAiBd,EAAGe,mBAAmBH,EAAMC,KAAKP,eAlCrDU,CAAsBjB,U","file":"plugins/plugin.iframe.js","sourcesContent":["/* global BookReader */\r\n/**\r\n * Plugin for two-way communication between a BookReader in an IFrame and the\r\n * parent web page\r\n */\r\n\r\nconst MESSAGE_TYPE_FRAGMENT_CHANGE = 'bookReaderFragmentChange';\r\n\r\nBookReader.prototype.init = (function (super_) {\r\n  return function () {\r\n    super_.call(this);\r\n    _attachEventListeners(this);\r\n  };\r\n})(BookReader.prototype.init);\r\n\r\n/**\r\n * @private\r\n * Using window.postMessage() and event listeners, the plugin notifies the\r\n * parent window when pages change, and the parent window can also\r\n * explicitly request a page change by sending its own message.\r\n *\r\n * @param {BookReader} br\r\n * @param {Window?} [parent]\r\n */\r\nexport function _attachEventListeners(br, parent = window.parent) {\r\n  // Not embedded, abort\r\n  if (!parent) {\r\n    return;\r\n  }\r\n\r\n  br.bind(BookReader.eventNames.fragmentChange, () => {\r\n    const fragment = br.fragmentFromParams(br.paramsFromCurrent());\r\n\r\n    parent.postMessage(\r\n      { type: MESSAGE_TYPE_FRAGMENT_CHANGE, fragment },\r\n      '*'\r\n    );\r\n  });\r\n\r\n  window.addEventListener('message', event => {\r\n    // Not a recognized message type, abort\r\n    if (!event.data || event.data.type !== MESSAGE_TYPE_FRAGMENT_CHANGE) {\r\n      return;\r\n    }\r\n\r\n    br.updateFromParams(br.paramsFromFragment(event.data.fragment));\r\n  });\r\n}\r\n"],"sourceRoot":""}