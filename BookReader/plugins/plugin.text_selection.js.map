{"version":3,"sources":["webpack://@internetarchive/bookreader/./src/util/strings.js","webpack://@internetarchive/bookreader/./src/js/plugins/plugin.text_selection.js","webpack://@internetarchive/bookreader/./src/util/browserSniffing.js","webpack://@internetarchive/bookreader/./node_modules/core-js/internals/string-trim-forced.js","webpack://@internetarchive/bookreader/./node_modules/core-js/internals/string-trim.js","webpack://@internetarchive/bookreader/./node_modules/core-js/internals/whitespaces.js","webpack://@internetarchive/bookreader/./node_modules/core-js/modules/es.object.assign.js","webpack://@internetarchive/bookreader/./node_modules/core-js/modules/es.string.trim.js"],"names":["applyVariables","template","vars","overrides","possibleFilters","APPLY_FILTERS","replace","$0","$1","split","map","x","trim","varName","filterNames","value","n","reduce","acc","cur","toString","urlencode","encodeURIComponent","BookReader","window","DEFAULT_OPTIONS","enabled","fullDjvuXmlUrl","singlePageDjvuXmlUrl","Cache","maxSize","this","entries","entry","length","shift","push","TextSelectionPlugin","options","optionVariables","avoidTspans","isFirefox","pointerEventsOnParagraph","isSafari","djvuPagesPromise","svgParagraphElement","svgWordElement","insertNewlines","pageTextCache","maxWordRendered","$","ajax","type","url","dataType","error","e","then","res","xmlMap","parseXML","find","index","cachedEntry","response","pageIndex","xmlDoc","result","add","XMLpagesArr","$container","addEventListener","event","selection","document","getSelection","clipboardData","setData","preventDefault","svg","classList","remove","on","target","is","stopPropagation","one","off","textSelectingMode","removeAllRanges","defaultMode","$svg","each","i","s","interceptCopy","getPageText","XMLpage","XMLwidth","attr","XMLheight","totalWords","console","log","createElementNS","setAttribute","append","css","paragraph","words","paragSvg","style","pointerEvents","wordHeightArr","currWord","parseFloat","left","bottom","right","wordHeight","wordTspan","textContent","appendChild","nextWord","leftNext","spaceTspan","createTextNode","sort","paragWordHeight","Math","floor","stopPageFlip","BookreaderWithTextSelection","Object","assign","plugins","textSelection","textSelectionPlugin","init","pageContainer","lastPageIndex","getNumLeafs","mode","constModeThumb","createTextLayer","isChrome","userAgent","navigator","vendor","test","fails","whitespaces","module","exports","METHOD_NAME","name","requireObjectCoercible","whitespace","ltrim","RegExp","rtrim","createMethod","TYPE","$this","string","String","start","end","stat","forced","$trim","proto","forcedStringTrimMethod"],"mappings":"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","file":"plugins/plugin.text_selection.js","sourcesContent":["/**\n * @typedef {String} StringWithVars\n * A template string with {{foo}} style variables\n * Also supports filters, like {{bookPath|urlencode}} (See APPLY_FILTERS for the\n * supported list of filters)\n **/\n\n/**\n * @param {StringWithVars|String} template\n * @param { {[varName: string]: { toString: () => string} } } vars\n * @param { {[varName: string]: { toString: () => string} } } [overrides]\n */\nexport function applyVariables(template, vars, overrides={}, possibleFilters=APPLY_FILTERS) {\n  return template?.replace(/\\{\\{([^}]*?)\\}\\}/g, ($0, $1) => {\n    if (!$1) return $0;\n    /** @type {string} */\n    const expression = $1;\n    const [varName, ...filterNames] = expression.split('|').map(x => x.trim());\n    const defined = varName in overrides || varName in vars;\n\n    // If it's not defined, don't expand it at all\n    if (!defined) return $0;\n    \n    const value = varName in overrides ? overrides[varName]\n    : varName in vars ? vars[varName] : null;\n    const filters = filterNames.map(n => possibleFilters[n]);\n    return filters.reduce((acc, cur) => cur(acc), value && value.toString());\n  });\n}\n\n/** @type { {[filterName: String]:( string => string)} } */\nexport const APPLY_FILTERS = {\n  urlencode: encodeURIComponent,\n};\n","//@ts-check\nimport { isFirefox, isSafari } from '../../util/browserSniffing.js';\nimport { applyVariables } from '../../util/strings.js';\n/** @typedef {import('../../util/strings.js').StringWithVars} StringWithVars */\n\nconst BookReader = /** @type {typeof import('../BookReader').default} */(window.BookReader);\n\nexport const DEFAULT_OPTIONS = {\n  enabled: true,\n  /** @type {StringWithVars} The URL to fetch the entire DJVU xml. Supports options.vars */\n  fullDjvuXmlUrl: null,\n  /** @type {StringWithVars} The URL to fetch a single page of the DJVU xml. Supports options.vars. Also has {{pageIndex}} */\n  singlePageDjvuXmlUrl: null,\n};\n/** @typedef {typeof DEFAULT_OPTIONS} TextSelectionPluginOptions */\n\n/**\n * @template T\n */\nexport class Cache {\n  constructor(maxSize = 10) {\n    this.maxSize = maxSize;\n    /** @type {T[]} */\n    this.entries = [];\n  }\n\n  /**\n   * @param {T} entry\n   */\n  add(entry) {\n    if (this.entries.length >= this.maxSize) {\n      this.entries.shift();\n    }\n    this.entries.push(entry);\n  }\n}\n\nexport class TextSelectionPlugin {\n\n  constructor(options = DEFAULT_OPTIONS, optionVariables, avoidTspans = isFirefox(), pointerEventsOnParagraph = isSafari()) {\n    this.options = options;\n    this.optionVariables = optionVariables;\n    /**@type {PromiseLike<JQuery<HTMLElement>|undefined>} */\n    this.djvuPagesPromise = null;\n    // Using text elements instead of tspans for words because Firefox does not allow svg tspan stretch.\n    // Tspans are necessary on Chrome because they prevent newline character after every word when copying\n    this.svgParagraphElement = \"text\";\n    this.svgWordElement = \"tspan\";\n    this.insertNewlines = avoidTspans\n    // Safari has a bug where `pointer-events` doesn't work on `<tspans>`. So\n    // there we will set `pointer-events: all` on the paragraph element. We don't\n    // do this everywhere, because it's a worse experience. Thanks Safari :/\n    this.pointerEventsOnParagraph = pointerEventsOnParagraph;\n    if (avoidTspans) {\n      this.svgParagraphElement = \"g\";\n      this.svgWordElement = \"text\";\n    }\n\n    /** @type {Cache<{index: number, response: any}>} */\n    this.pageTextCache = new Cache();\n\n    /**\n     * Sometimes there are too many words on a page, and the browser becomes near\n     * unusable. For now don't render text layer for pages with too many words.\n     */\n    this.maxWordRendered = 2500;\n  }\n\n  init() {\n    // Only fetch the full djvu xml if the single page url isn't there\n    if (this.options.singlePageDjvuXmlUrl) return;\n    this.djvuPagesPromise = $.ajax({\n      type: \"GET\",\n      url: applyVariables(this.options.fullDjvuXmlUrl, this.optionVariables),\n      dataType: \"html\",\n      error: (e) => undefined\n    }).then((res) => {\n      try {\n        const xmlMap = $.parseXML(res);\n        return xmlMap && $(xmlMap).find(\"OBJECT\");\n      } catch (e) {\n        return undefined;\n      }\n    });\n  }\n\n  /**\n   * @param {number} index\n   * @returns {Promise<HTMLElement|undefined>}\n   */\n  async getPageText(index) {\n    if (this.options.singlePageDjvuXmlUrl) {\n      const cachedEntry = this.pageTextCache.entries.find(x => x.index == index);\n      if (cachedEntry) {\n        return cachedEntry.response;\n      }\n      return $.ajax({\n        type: \"GET\",\n        url: applyVariables(this.options.singlePageDjvuXmlUrl, this.optionVariables, { pageIndex: index }),\n        dataType: \"html\",\n        error: (e) => undefined,\n      }).then((res) => {\n        try {\n          const xmlDoc = $.parseXML(res);\n          const result = xmlDoc && $(xmlDoc).find(\"OBJECT\")[0];\n          this.pageTextCache.add({ index, response: result });\n          return result;\n        } catch (e) {\n          return undefined;\n        }\n      });\n    } else {\n      const XMLpagesArr = await this.djvuPagesPromise;\n      if (XMLpagesArr) return XMLpagesArr[index];\n    }\n  }\n\n  /**\n   * Intercept copied text to remove any styling applied to it\n   * @param {JQuery} $container\n   */\n  interceptCopy($container) {\n    $container[0].addEventListener('copy', (event) => {\n      const selection = document.getSelection();\n      event.clipboardData.setData('text/plain', selection.toString());\n      event.preventDefault();\n    });\n  }\n\n  /**\n   * Applies mouse events when in default mode\n   * @param {SVGElement} svg\n   */\n  defaultMode(svg) {\n    svg.classList.remove(\"selectingSVG\");\n    $(svg).on(\"mousedown.textSelectPluginHandler\", (event) => {\n      if (!$(event.target).is(\".BRwordElement\")) return;\n      event.stopPropagation();\n      svg.classList.add(\"selectingSVG\");\n      $(svg).one(\"mouseup.textSelectPluginHandler\", (event) => {\n        if (window.getSelection().toString() != \"\") {\n          event.stopPropagation();\n          $(svg).off(\".textSelectPluginHandler\");\n          this.textSelectingMode(svg);\n        }\n        else svg.classList.remove(\"selectingSVG\");\n      })\n    })\n  }\n\n  /**\n   * Applies mouse events when in textSelecting mode\n   * @param {SVGElement} svg\n   */\n  textSelectingMode(svg) {\n    $(svg).on('mousedown.textSelectPluginHandler', (event) => {\n      if (!$(event.target).is(\".BRwordElement\")) {\n        if (window.getSelection().toString() != \"\") window.getSelection().removeAllRanges();\n      }\n      event.stopPropagation();\n    })\n    $(svg).on('mouseup.textSelectPluginHandler', (event) => {\n      event.stopPropagation();\n      if (window.getSelection().toString() == \"\") {\n        $(svg).off(\".textSelectPluginHandler\");\n        this.defaultMode(svg);      }\n    })\n  }\n\n  /**\n   * Initializes text selection modes if there is an svg on the page\n   * @param {JQuery} $container\n   */\n  stopPageFlip($container) {\n    /** @type {JQuery<SVGElement>} */\n    const $svg = $container.find('svg.textSelectionSVG');\n    if (!$svg.length) return;\n    $svg.each((i, s) => this.defaultMode(s))\n    this.interceptCopy($container);\n  }\n\n  /**\n   * @param {number} pageIndex\n   * @param {JQuery} $container\n   */\n  async createTextLayer(pageIndex, $container) {\n    const $svgLayers = $container.find('.textSelectionSVG');\n    if ($svgLayers.length) return;\n    const XMLpage = await this.getPageText(pageIndex);\n    if (!XMLpage) return;\n    const XMLwidth = $(XMLpage).attr(\"width\");\n    const XMLheight = $(XMLpage).attr(\"height\");\n\n    const totalWords = $(XMLpage).find(\"WORD\").length;\n    if (totalWords > this.maxWordRendered) {\n      console.log(`Page ${pageIndex} has too many words (${totalWords} > ${this.maxWordRendered}). Not rendering text layer.`);\n      return;\n    }\n\n    const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    svg.setAttribute(\"xmlns\", \"http://www.w3.org/2000/svg\");\n    svg.setAttribute(\"viewBox\", `0 0 ${XMLwidth} ${XMLheight}`);\n    $container.append(svg);\n    svg.setAttribute('class', 'textSelectionSVG');\n    svg.setAttribute('preserveAspectRatio', 'none');\n    $(svg).css({\n      \"width\": \"100%\",\n      \"position\": \"absolute\",\n      \"height\": \"100%\",\n      \"top\": \"0\",\n      \"left\": \"0\",\n    });\n\n    $(XMLpage).find(\"PARAGRAPH\").each((i, paragraph) => {\n      // Adding text element for each paragraph in the page\n      const words = $(paragraph).find(\"WORD\");\n      if (!words.length) return;\n      const paragSvg = document.createElementNS(\"http://www.w3.org/2000/svg\", this.svgParagraphElement);\n      paragSvg.setAttribute(\"class\", \"BRparagElement\");\n      if (this.pointerEventsOnParagraph) {\n        paragSvg.style.pointerEvents = \"all\";\n      }\n\n      const wordHeightArr = [];\n\n      for (let i = 0; i < words.length; i++) {\n        // Adding tspan for each word in paragraph\n        const currWord = words[i];\n        // eslint-disable-next-line no-unused-vars\n        const [left, bottom, right, top] = $(currWord).attr(\"coords\").split(',').map(parseFloat);\n        const wordHeight = bottom - top;\n        wordHeightArr.push(wordHeight);\n\n        const wordTspan = document.createElementNS(\"http://www.w3.org/2000/svg\", this.svgWordElement);\n        wordTspan.setAttribute(\"class\", \"BRwordElement\");\n        wordTspan.setAttribute(\"x\", left.toString());\n        wordTspan.setAttribute(\"y\", bottom.toString());\n        wordTspan.setAttribute(\"textLength\", (right - left).toString());\n        wordTspan.setAttribute(\"lengthAdjust\", \"spacingAndGlyphs\");\n        wordTspan.textContent = currWord.textContent;\n        paragSvg.appendChild(wordTspan);\n\n        // Adding spaces after words except at the end of the paragraph\n        // TODO: assumes left-to-right text\n        if (i < words.length - 1) {\n          const nextWord = words[i + 1];\n          // eslint-disable-next-line no-unused-vars\n          const [leftNext, bottomNext, rightNext, topNext] = $(nextWord).attr(\"coords\").split(',').map(parseFloat);\n          const spaceTspan = document.createElementNS(\"http://www.w3.org/2000/svg\", this.svgWordElement);\n          spaceTspan.setAttribute(\"class\", \"BRwordElement\");\n          spaceTspan.setAttribute(\"x\", right.toString());\n          spaceTspan.setAttribute(\"y\", bottom.toString());\n          if ((leftNext - right) > 0) spaceTspan.setAttribute(\"textLength\", (leftNext - right).toString());\n          spaceTspan.setAttribute(\"lengthAdjust\", \"spacingAndGlyphs\");\n          spaceTspan.textContent = \" \";\n          paragSvg.appendChild(spaceTspan);\n        }\n\n        // Adds newline at the end of paragraph on Firefox\n        if ((i ==  words.length - 1 && (this.insertNewlines))) {\n          paragSvg.appendChild(document.createTextNode(\"\\n\"));\n        }\n      }\n\n      wordHeightArr.sort();\n      const paragWordHeight = wordHeightArr[Math.floor(wordHeightArr.length * 0.85)];\n      paragSvg.setAttribute(\"font-size\", paragWordHeight.toString());\n      svg.appendChild(paragSvg);\n    })\n    this.stopPageFlip($container);\n  }\n}\n\nexport class BookreaderWithTextSelection extends BookReader {\n  init() {\n    const options = Object.assign({}, DEFAULT_OPTIONS, this.options.plugins.textSelection);\n    if (options.enabled) {\n      this.textSelectionPlugin = new TextSelectionPlugin(options, this.options.vars);\n      // Write this back; this way the plugin is the source of truth, and BR just\n      // contains a reference to it.\n      this.options.plugins.textSelection = options;\n      this.textSelectionPlugin.init();\n    }\n    super.init();\n  }\n\n  /**\n   * @param {number} index\n   */\n  _createPageContainer(index) {\n    const pageContainer = super._createPageContainer(index);\n    // Disable if thumb mode; it's too janky\n    // index can be -1 for \"pre-cover\" region\n    // Added checking of lastPageIndex to avoid loop around index value\n    const lastPageIndex = this.getNumLeafs() - 1;\n    if (this.mode !== this.constModeThumb && (index >= 0 && index <= lastPageIndex)) {\n      this.textSelectionPlugin?.createTextLayer(index, pageContainer.$container);\n    }\n    return pageContainer;\n  }\n}\nwindow.BookReader = BookreaderWithTextSelection;\nexport default BookreaderWithTextSelection;\n","\n/**\n * Checks whether the current browser is a Chrome/Chromium browser\n * Code from https://stackoverflow.com/a/4565120/2317712\n * @param {string} [userAgent]\n * @param {string} [vendor]\n * @return {boolean}\n */\nexport function isChrome(userAgent = navigator.userAgent, vendor = navigator.vendor) {\n  return /chrome/i.test(userAgent) && /google inc/i.test(vendor);\n}\n\n/**\n * Checks whether the current browser is firefox\n * @param {string} [userAgent]\n * @return {boolean}\n */\nexport function isFirefox(userAgent = navigator.userAgent) {\n  return /firefox/i.test(userAgent);\n}\n\n/**\n * Checks whether the current browser is safari\n * https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent#Browser_Name\n * @param {string} [userAgent]\n * @return {boolean}\n */\nexport function isSafari(userAgent = navigator.userAgent) {\n  return /safari/i.test(userAgent) && !/chrome|chromium/i.test(userAgent);\n}\n","var fails = require('../internals/fails');\nvar whitespaces = require('../internals/whitespaces');\n\nvar non = '\\u200B\\u0085\\u180E';\n\n// check that a method works with the correct list\n// of whitespaces and has a correct name\nmodule.exports = function (METHOD_NAME) {\n  return fails(function () {\n    return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;\n  });\n};\n","var requireObjectCoercible = require('../internals/require-object-coercible');\nvar whitespaces = require('../internals/whitespaces');\n\nvar whitespace = '[' + whitespaces + ']';\nvar ltrim = RegExp('^' + whitespace + whitespace + '*');\nvar rtrim = RegExp(whitespace + whitespace + '*$');\n\n// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation\nvar createMethod = function (TYPE) {\n  return function ($this) {\n    var string = String(requireObjectCoercible($this));\n    if (TYPE & 1) string = string.replace(ltrim, '');\n    if (TYPE & 2) string = string.replace(rtrim, '');\n    return string;\n  };\n};\n\nmodule.exports = {\n  // `String.prototype.{ trimLeft, trimStart }` methods\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart\n  start: createMethod(1),\n  // `String.prototype.{ trimRight, trimEnd }` methods\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trimend\n  end: createMethod(2),\n  // `String.prototype.trim` method\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trim\n  trim: createMethod(3)\n};\n","// a string of all valid unicode whitespaces\n// eslint-disable-next-line max-len\nmodule.exports = '\\u0009\\u000A\\u000B\\u000C\\u000D\\u0020\\u00A0\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n","var $ = require('../internals/export');\nvar assign = require('../internals/object-assign');\n\n// `Object.assign` method\n// https://tc39.github.io/ecma262/#sec-object.assign\n$({ target: 'Object', stat: true, forced: Object.assign !== assign }, {\n  assign: assign\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar $trim = require('../internals/string-trim').trim;\nvar forcedStringTrimMethod = require('../internals/string-trim-forced');\n\n// `String.prototype.trim` method\n// https://tc39.github.io/ecma262/#sec-string.prototype.trim\n$({ target: 'String', proto: true, forced: forcedStringTrimMethod('trim') }, {\n  trim: function trim() {\n    return $trim(this);\n  }\n});\n"],"sourceRoot":""}